ylab = "Blood Pressure",
main = "BP by Final Decision"
)
# Histogram of Visit Frequency
hist(
df_hosp$Frequency,
breaks = seq(0, 1, by = 0.1),
xlab = "Visit Frequency",
main = "Histogram of Visit Frequency"
)
# Histogram of Blood Pressure
hist(
df_hosp$BloodPressure,
breaks = 8,
xlab = "Blood Pressure",
main = "Histogram of Blood Pressure"
)
# Create the matrices
A <- matrix(1:100,  nrow = 10)
B <- matrix(1:1000, nrow = 10)
# 1. Transpose (flip rows/columns)
A_t <- t(A)
B_t <- t(B)
# 2. Multiply matrix by a vector
v <- 1:10
A_multiplied <- A %*% v
# 3. Multiply two matrices
C <- A %*% B
dimC <- dim(C)
print("Transpose of A:")
print(A_t[1:5, 1:5])  # print sample
print("Transpose of B:")
print(B_t[1:5, 1:5])  # print sample
print("Matrix A times vector v:")
print(A_multiplied)
print("Dimensions of C = A %*% B:")
print(dimC)
# Install Bioconductor packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("airway")
BiocManager::install("SummarizedExperiment")
# Load libraries
library(airway)
library(SummarizedExperiment)
# Load dataset
data("airway")
airway
# Summarize the dataset
head(assay(airway))   # show first few rows of expression counts
str(airway)           # structure of the SummarizedExperiment object
# Plot example (base R)
boxplot(log2(assay(airway)[,] + 1), las=2, main="Gene Expression (log2 counts)")
s3_obj <- list(name = "Sample1", age = 35, gene_count = 20000)
class(s3_obj) <- "biostudent_s3
# Create a simple print method for S3
print.biostudent_s3 <- function(x) {
cat("S3 Object: Name =", x$name, "Age =", x$age, "Gene count =", x$gene_count, "\n")
class(s3_obj) <- "biostudent_s3
# Create a simple print method for S3
print.biostudent_s3 <- function(x) {
cat("S3 Object: Name =", x$name, "Age =", x$age, "Gene count =", x$gene_count, "\n")
# Load dataset
data("PlantGrowth")
head(PlantGrowth)
# Describe structure
str(PlantGrowth)
# Summarize dataset
summary(PlantGrowth)
# Create an S3 object
s3_obj_pg <- list(weight ~ group, data = PlantGrowth)
print(s3_obj_pg)
# Assign S3 class
class(s3_obj_pg) <- "PlantExperiment"
print(s3_obj_pg)
print(class(s3_obj_pg))
# Check object type
library(pryr)
otype(s3_obj_pg)   # Object type
typeof(s3_obj_pg)  # Base type ("list")
# Define S4 class
setClass(
"PlantExperimentS4",
slots = c(weight = "numeric", group = "character")
)
# Create an instance
s4_obj_pg <- new("PlantExperimentS4", weight = 5.2, group = "ctrl")
# Check class system
class(s4_obj_pg)
isS4(s4_obj_pg)  # TRUE
print(s4_obj_pg)
# Base type and attributes
typeof(s4_obj_pg)       # "S4"
attributes(s4_obj_pg)   # Slots
is.object(s4_obj_pg)    # TRUE
# Load dataset
data("PlantGrowth")
head(PlantGrowth)
# Describe structure
str(PlantGrowth)
# Summarize dataset
summary(PlantGrowth)
# Basic plot of PlantGrowth data
plot(PlantGrowth$group, PlantGrowth$weight,
main = "PlantGrowth Weight by Group",
xlab = "Group",
ylab = "Weight",
col = c("red", "green", "blue"))
# Create an S3 object
s3_obj_pg <- list(weight ~ group, data = PlantGrowth)
print(s3_obj_pg)
# Assign S3 class
class(s3_obj_pg) <- "PlantExperiment"
print(s3_obj_pg)
print(class(s3_obj_pg))
# Check object type
install.packages("pryr")
library(pryr)
otype(s3_obj_pg)   # Object type
typeof(s3_obj_pg)  # Base type ("list")
# Define S4 class
setClass(
"PlantExperimentS4",
slots = c(weight = "numeric", group = "character")
)
# Create an instance
s4_obj_pg <- new("PlantExperimentS4", weight = 5.2, group = "ctrl")
# Check class system
class(s4_obj_pg)
isS4(s4_obj_pg)  # TRUE
print(s4_obj_pg)
# Base type and attributes
typeof(s4_obj_pg)       # "S4"
attributes(s4_obj_pg)   # Slots
is.object(s4_obj_pg)    # TRUE
# Step 1: Import Assignment 6 dataset
student6 <- read.table("Assignment 6 Dataset.txt",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Step 1: Import dataset into R
# Choose file interactively or specify directly
student6 <- read.table(
file.choose(),      # or use "Assignment 6 Dataset.txt"
header = TRUE,
sep = ",",
stringsAsFactors = FALSE
)
# Step 1: Import dataset into R
# Choose file interactively or specify directly
student6 <- read.table(
file.choose(),      # or use "Assignment 6 Dataset.txt"
header = TRUE,
sep = ",",
stringsAsFactors = FALSE
)
# Step 2: Install and load plyr package
# install.packages("plyr")  # Uncomment if not installed
library(plyr)
# Step 1: Import dataset into R
# Choose file interactively or specify directly
student6 <- read.table(
file.choose(),      # or use "Assignment 6 Dataset.txt"
header = TRUE,
sep = ",",
stringsAsFactors = FALSE
)
# Step 2: Install and load plyr package
install.packages("plyr")
library(plyr)
# Compute mean Grade by Sex
gender_mean <- ddply(
student6,
"Sex",
summarise,
GradeAverage = mean(Grade, na.rm = TRUE)
)
# Step 3: Write the grouped means to a text file
write.table(
gender_mean,
file = "gender_mean.txt",
sep = "\t",
row.names = FALSE
)
# Step 4: Filter names containing the letter "i" (case-insensitive)
i_students <- subset(
student6,
grepl("i", Name, ignore.case = TRUE)
)
# Step 5: Write only the names to a CSV file
write.csv(
i_students$Name,
file = "i_students.csv",
row.names = FALSE,
quote = FALSE
)
# Step 6: Write the full filtered dataset to another CSV
write.csv(
i_students,
file = "i_students_full.csv",
row.names = FALSE
)
# Step 7: Confirm files exist in working directory
cat("Files successfully created in:", getwd(), "\n")
list.files(pattern = "gender_mean|i_students")
View(gender_mean)
View(gender_mean)
View(i_students)
View(student6)
View(student6)
View(student6)
# Load libraries and dataset
library(dslabs)
# Load libraries and dataset
install.packages("dslabs")
library(dslabs)
data("brca")
# 'brca$y' contains the diagnosis (Benign/ Malignant)
# 'brca$x' is a matrix of 30 numeric features
head(brca$y)
str(brca$x)
# Combine into one data frame for easy plotting
df <- data.frame(diagnosis = brca$y, brca$x)
head(df)
# Base R Graphics
# Scatter plot: Texture vs Radius, color-coded by diagnosis
plot(df$radius_mean, df$texture_mean,
col = ifelse(df$diagnosis == "M", "red", "blue"),
pch = 19,
xlab = "Mean Radius",
ylab = "Mean Texture",
main = "Base R: Texture vs Radius by Diagnosis")
legend("topright", legend = c("Benign", "Malignant"),
col = c("blue", "red"), pch = 19)
# Histogram: Distribution of Radius (Malignant only)
hist(df$radius_mean[df$diagnosis == "M"],
main = "Base R: Radius Distribution (Malignant)",
xlab = "Mean Radius", col = "pink", breaks = 20)
library(lattice)
# Boxplot: Comparing radius_mean between Benign and Malignant
boxplot(radius_mean ~ diagnosis, data = df,
main = "Base R: Boxplot of Mean Radius by Diagnosis",
xlab = "Diagnosis", ylab = "Mean Radius",
col = c("lightblue", "lightpink"))
# Lattice Graphics
# Conditional scatter plot (small multiples)
xyplot(texture_mean ~ radius_mean | diagnosis,
data = df,
layout = c(2,1),
main = "Lattice: Texture vs Radius by Diagnosis",
xlab = "Mean Radius",
ylab = "Mean Texture",
col = "darkgreen",
pch = 20)
# Box-and-whisker plot
bwplot(radius_mean ~ diagnosis,
data = df,
main = "Lattice: Radius by Diagnosis",
xlab = "Diagnosis",
ylab = "Mean Radius",
fill = "lightblue")
# Density plot for smoother comparison
densityplot(~ radius_mean, groups = diagnosis,
data = df, auto.key = TRUE,
main = "Lattice: Density of Mean Radius by Diagnosis",
plot.points = FALSE)
# ggplot2 Visualizations
# Scatter plot with linear regression line
library(ggplot2)
ggplot(df, aes(x = radius_mean, y = texture_mean, color = diagnosis)) +
geom_point(size = 2, alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "ggplot2: Texture vs Radius by Diagnosis",
x = "Mean Radius",
y = "Mean Texture") +
theme_minimal()
# Faceted histogram
ggplot(df, aes(x = radius_mean, fill = diagnosis)) +
geom_histogram(binwidth = 1, color = "black", alpha = 0.6) +
facet_wrap(~ diagnosis, scales = "free_y") +
labs(title = "ggplot2: Radius Distribution by Diagnosis",
x = "Mean Radius",
y = "Count") +
theme_minimal() +
theme(legend.position = "none")
# Step 0: Install tools (if not already installed)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
# Step 1: Create your package
setwd("C:/Users/YourName/Documents/")  # <-- change this to your own working directory
# Step 1: Create your package
setwd("/Users/premithapagadala/Documents/R_Programming_Fall2025_Pagadala_Premitha/Assignments")  # <-- change this to your own working directory
create("Premitha")
setwd("Premitha")
# Step 4: Edit DESCRIPTION file ------------------------------------------------
desc_lines <- '
Package: Premitha
Title: Simple Tools for Streamlined Data Analysis
Version: 0.0.0.9000
Authors@R:
person("Premitha", "Pagadala",
email = "premitha.pag@example.com",
role = c("aut", "cre"))
Description:
The Premitha package provides simple, easy-to-use helper functions
that make common data analysis tasks faster and more efficient.
It is designed for students, researchers, and analysts who want
to perform exploratory data analysis and visualization quickly
without repetitive coding.
Depends: R (>= 3.1.2)
Imports:
ggplot2,
dplyr
License: CC0
LazyData: true
URL: https://github.com/premitha-pagadala/Premitha
BugReports: https://github.com/premitha-pagadala/Premitha/issues
Suggests: knitr, rmarkdown
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.3
'
writeLines(desc_lines, "DESCRIPTION")
# Step 5: Create your first R function file ------------------------------------
# Create file in R/ folder and write your function
dir.create("R", showWarnings = FALSE)
function_code <- '
#\' Quick Summary and Visualization
#\'
#\' Generates a summary and a histogram for a numeric variable in a data frame.
#\' @param data A data frame containing the variable.
#\' @param var The name of the numeric variable (unquoted).
#\' @return Prints summary statistics and displays a histogram.
#\' @examples
#\' quick_summary_plot(mtcars, mpg)
#\' @export
quick_summary_plot <- function(data, var) {
variable <- dplyr::pull(data, {{ var }})
cat("Summary statistics for", deparse(substitute(var)), ":\n")
print(summary(variable))
print(
ggplot2::ggplot(data, ggplot2::aes(x = {{ var }})) +
ggplot2::geom_histogram(binwidth = diff(range(variable))/30,
fill = "skyblue", color = "white") +
ggplot2::theme_minimal() +
ggplot2::labs(title = paste("Histogram of", deparse(substitute(var))))
)
}
'
writeLines(function_code, "R/quick_summary_plot.R")
# Step 6: Document your package ------------------------------------------------
document()
# Step 7: Check your package ---------------------------------------------------
check()
# Step 8: Build your package ---------------------------------------------------
build()
# Step 11: Test your function --------------------------------------------------
library(Premitha)
quick_summary_plot(mtcars, mpg)
library(devtools)
library(roxygen2)
library(devtools)
library(roxygen2)
library(usethis)
library(dplyr)
library(ggplot2)
# Step 1: Set your working directory ------------------------------------------
# Replace this path with your actual folder path where you want your package
setwd("/Users/premithapagadala/Documents/R_Programming_Fall2025_Pagadala_Premitha/Assignments")
# Step 2: Create your package skeleton ----------------------------------------
create("Premitha")
# Step 3: Set working directory inside your package ---------------------------
setwd("Premitha")
desc_lines <- '
Package: Premitha
Title: Simple Tools for Streamlined Data Analysis
Version: 0.0.0.9000
Authors@R:
person("Premitha", "Pagadala",
email = "premitha.pag@example.com",
role = c("aut", "cre"))
Description:
The Premitha package provides simple, easy-to-use helper functions
that make common data analysis tasks faster and more efficient.
It is designed for students, researchers, and analysts who want
to perform exploratory data analysis and visualization quickly
without repetitive coding.
Depends: R (>= 3.1.2)
Imports:
ggplot2,
dplyr
License: CC0
LazyData: true
URL: https://github.com/premitha-pagadala/Premitha
BugReports: https://github.com/premitha-pagadala/Premitha/issues
Suggests: knitr, rmarkdown
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.3
'
writeLines(desc_lines, "DESCRIPTION")
# Step 5: Create your first R function file ------------------------------------
# Create file in R/ folder and write your function
dir.create("R", showWarnings = FALSE)
function_code <- '
#\' Quick Summary and Visualization
#\'
#\' Generates a summary and a histogram for a numeric variable in a data frame.
#\' @param data A data frame containing the variable.
#\' @param var The name of the numeric variable (unquoted).
#\' @return Prints summary statistics and displays a histogram.
#\' @examples
#\' quick_summary_plot(mtcars, mpg)
#\' @export
quick_summary_plot <- function(data, var) {
variable <- dplyr::pull(data, {{ var }})
cat("Summary statistics for", deparse(substitute(var)), ":\n")
print(summary(variable))
print(
ggplot2::ggplot(data, ggplot2::aes(x = {{ var }})) +
ggplot2::geom_histogram(binwidth = diff(range(variable))/30,
fill = "skyblue", color = "white") +
ggplot2::theme_minimal() +
ggplot2::labs(title = paste("Histogram of", deparse(substitute(var))))
)
}
'
writeLines(function_code, "R/quick_summary_plot.R")
# Step 6: Document your package ------------------------------------------------
document()
# Step 7: Check your package ---------------------------------------------------
check()
# Step 8: Build your package ---------------------------------------------------
build()
# Step 11: Test your function --------------------------------------------------
library(Premitha)
quick_summary_plot(mtcars, mpg)
# Step 0: Install tools
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
# Step 1: Create your package
setwd("/Users/premithapagadala/Documents/R_Programming_Fall2025_Pagadala_Premitha/Assignments/Assignment_10_Create_Package")
create("Premitha")
setwd("Premitha") #working directory inside your package
# Step 2: Write DESCRIPTION file
desc_lines <- '
Package: Premitha
Title: Simple Tools for Streamlined Data Analysis
Version: 0.0.0.9000
Authors@R:
person("Premitha", "Pagadala",
email = "premithapagadala@gmail.com",
role = c("aut", "cre"))
Description:
The Premitha package provides simple, easy-to-use helper functions
that make common data analysis tasks faster and more efficient.
It is designed for students, researchers, and analysts who want
to perform exploratory data analysis and visualization quickly
without repetitive coding.
Depends: R (>= 3.1.2)
Imports:
ggplot2,
dplyr
License: CC0
LazyData: true
URL: https://github.com/premitha27/R_Programming_Fall2025_Pagadala_Premitha
BugReports: https://github.com/premitha27/R_Programming_Fall2025_Pagadala_Premitha/issues
Suggests: knitr, rmarkdown
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.3
'
writeLines(desc_lines, "DESCRIPTION")
# Step 3: Create your first R function file
# Create file in R/ folder and write your function
dir.create("R", showWarnings = FALSE)
function_code <- '
#\' Quick Summary and Visualization
#\'
#\' Generates a summary and a histogram for a numeric variable in a data frame.
#\' @param data A data frame containing the variable.
#\' @param var The name of the numeric variable (unquoted).
#\' @return Prints summary statistics and displays a histogram.
#\' @examples
#\' quick_summary_plot(mtcars, mpg)
#\' @export
quick_summary_plot <- function(data, var) {
variable <- dplyr::pull(data, {{ var }})
cat("Summary statistics for", deparse(substitute(var)), ":\n")
print(summary(variable))
print(
ggplot2::ggplot(data, ggplot2::aes(x = {{ var }})) +
ggplot2::geom_histogram(binwidth = diff(range(variable))/30,
fill = "skyblue", color = "white") +
ggplot2::theme_minimal() +
ggplot2::labs(title = paste("Histogram of", deparse(substitute(var))))
)
}
'
writeLines(function_code, "R/quick_summary_plot.R")
# Step 4: Document, check, and build package
document()  # Generates NAMESPACE and man/ documentation
check()     # Validates package structure
build()     # Creates .tar.gz file (installable package)
# Step 6: Test your function
library(Premitha)
quick_summary_plot(mtcars, mpg)
